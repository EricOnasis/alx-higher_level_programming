
Usage
====

``add_integer(..)``` returns the addition of two arguments.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(5, 3)
    8

::

    >>> add_integer(9, -11)
    -2


::

    >>> add_integer(5.0, 1.0)
    6


::

    >>> add_integer(2.9, 0.2)
    2

::

    >>> add_integer(-2.9, -0.2)
    -2


::

    >>> add_integer(2.3, -3)
    -1


::

    >>> add_integer(12)
    110

Non-Numbers
===========

``add_integer(..)`` expects that both arguments are either integers or floats.
If either argument not, a TypeError is raised:

::

    >>> add_integer("python", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "python")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer


::

    >>> add_integer("hello", "python")
    Traceback (most recent call last):
    TypeError: a must be an integer
